name: Build Toolchain Docker Image

env:
  DEFAULT_KERNEL_VERSION: "5.15.94"
  DEFAULT_TOOLCHAIN_ARCH: "arm32v7"
  # Override path to GitHub Container Repository
  GHCR_REPOSITORY: "${{ github.repository }}"

on:
  push:
    # branches:
    #   - toolchain
    tags:
      - "*-toolchain-*"
  workflow_call:
    inputs:
      toolchain_arch:
        description: "Toolchain Architecture"
        required: true
        type: string
      kernel_version:
        description: "Kernel version"
        required: true
        type: string

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      kernel_version: ${{ steps.kernel.outputs.version }}
      toolchain_arch: ${{ steps.toolchain.outputs.arch }}
      commit_short_sha: ${{ steps.build_vars.outputs.commit_short_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Ensure toolchain tag prefix
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            PREFIX=$(echo "${{ github.ref_name }}" | cut -f1 -d-)
            if [ "${PREFIX}" != "toolchain" ]; then
              echo "Bad format of tag. Expected format 'toolchain-<KERNEL_VERSION>-<TOOLCHAIN_ARCH>-<YYYYMMDD>'." >&2
              exit 1
            fi
          fi

      - name: Detect Kernel variables
        id: kernel
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            KERNEL_VERSION=$(echo "${{ github.ref_name }}" | cut -f2 -d-)
          else
            KERNEL_VERSION="${{ inputs.kernel_version || env.DEFAULT_KERNEL_VERSION }}"
          fi
          echo "version=${KERNEL_VERSION}" >> $GITHUB_OUTPUT

      - name: Detect toolchain variables
        id: toolchain
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            TOOLCHAIN_ARCH=$(echo "${{ github.ref_name }}" | cut -f3 -d-)
          else
            TOOLCHAIN_ARCH="${{ inputs.toolchain_arch || env.DEFAULT_TOOLCHAIN_ARCH }}"
          fi
          echo "arch=${TOOLCHAIN_ARCH}" >> $GITHUB_OUTPUT

      - name: Build variables
        id: build_vars
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | head -c 8)
          echo "  SHORT_SHA: ${SHORT_SHA}"
          echo "commit_short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

  docker-build:
    needs:
      - configure
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          KERNEL_VERSION="${{ needs.configure.outputs.kernel_version }}"
          TOOLCHAIN_ARCH="${{ needs.configure.outputs.toolchain_arch }}"

          if [ "${{ github.ref_type }}" == "tag" ]; then
            DOCKER_LATEST_TAG="latest"
            DOCKER_SHA_TAG="${{ github.ref_name }}.${{ needs.configure.outputs.commit_short_sha }}"
            DOCKER_VERSION_TAG="${KERNEL_VERSION}"
          else
            DOCKER_LATEST_TAG="snapshot"
            DOCKER_SHA_TAG="snapshot.${{ github.sha }}"
            DOCKER_VERSION_TAG="snapshot.${{ needs.configure.outputs.commit_short_sha }}"
          fi

          case "${TOOLCHAIN_ARCH}" in
            amd64)
              DOCKER_PLATFORM=linux/amd64
              ;;
            arm32v5)
              DOCKER_PLATFORM=linux/arm/v5
              ;;
            arm32v6)
              DOCKER_PLATFORM=linux/arm/v6
              ;;
            arm32v7)
              DOCKER_PLATFORM=linux/arm/v7
              ;;
            arm64v8)
              DOCKER_PLATFORM=linux/arm64/v8
              ;;
            i686)
              DOCKER_PLATFORM=linux/386
              ;;
            *)
              echo "Unsupported toolchain arch '${TOOLCHAIN_ARCH}'" >&2
              exit 1
              ;;
          esac

          echo "KERNEL_VERSION=${KERNEL_VERSION}" | tee -a $GITHUB_ENV
          echo "DOCKER_PLATFORM=${DOCKER_PLATFORM}" | tee -a $GITHUB_ENV
          echo "TOOLCHAIN_ARCH=${TOOLCHAIN_ARCH}" | tee -a $GITHUB_ENV
          echo "DOCKER_LATEST_TAG=${DOCKER_LATEST_TAG}" | tee -a $GITHUB_ENV
          echo "DOCKER_VERSION_TAG=${DOCKER_VERSION_TAG}" | tee -a $GITHUB_ENV
          echo "DOCKER_SHA_TAG=${DOCKER_SHA_TAG}" | tee -a $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/${{ env.TOOLCHAIN_ARCH }}/Dockerfile
          build-args: |
            GENTOO_SOURCES_BUNDLE_IMAGE_TAG=${{ env.KERNEL_VERSION }}
          platforms: ${{ env.DOCKER_PLATFORM }}
          push: true
          tags: |
            "ghcr.io/${{ env.GHCR_REPOSITORY }}/toolchain/${{ env.TOOLCHAIN_ARCH }}:${{ env.DOCKER_SHA_TAG }}"
            "ghcr.io/${{ env.GHCR_REPOSITORY }}/toolchain/${{ env.TOOLCHAIN_ARCH }}:${{ env.DOCKER_VERSION_TAG }}"
            "ghcr.io/${{ env.GHCR_REPOSITORY }}/toolchain/${{ env.TOOLCHAIN_ARCH }}:${{ env.DOCKER_LATEST_TAG }}"

  # publish-github:
  #   needs:
  #   - configure
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Log in to the GitHub Container Registry
  #     uses: docker/login-action@v2
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Tags and push
  #     run: |
  #       skopeo copy --all \
  #         "docker://ghcr.io/${{ env.GHCR_REPOSITORY }}:${{ github.ref_name }}.${{ github.sha }}" \
  #         "docker://ghcr.io/${{ env.GHCR_REPOSITORY }}:${{ github.ref_name }}.${{ needs.configure.outputs.commit_short_sha }}"
  #       skopeo copy --all \
  #         "docker://ghcr.io/${{ env.GHCR_REPOSITORY }}:${{ github.ref_name }}.${{ needs.configure.outputs.commit_short_sha }}" \
  #         "docker://ghcr.io/${{ env.GHCR_REPOSITORY }}:${{ github.ref_name }}"
  #       skopeo copy --all \
  #         "docker://ghcr.io/${{ env.GHCR_REPOSITORY }}:${{ github.ref_name }}" \
  #         "docker://ghcr.io/${{ env.GHCR_REPOSITORY }}:latest"
